<?xml version="1.0" encoding="UTF-8"?>
<project name="google-gin" default="all" basedir=".">
  <property file="build.properties"/>

  <property environment="env"/>

  <!-- Mac GWT requires -XstartOnFirstThread -->
  <condition property="mac">
    <os name="Mac OS X"/>
  </condition>
  <condition property="macJvmArgs" value="-XstartOnFirstThread" else="">
    <isset property="mac"/>
  </condition>

  <!-- Compiler options -->

  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>

  <property name="compiler.max.memory" value="128m"/>
  <property name="test.max.memory" value="256m"/>

  <!-- GWT installation directory; can be passed as Ant property gwt.home,
       or can be provided by system property GWT_HOME. -->
  <property name="gwt.home" value="${env.GWT_HOME}"/>

  <patternset id="compiler.resources">
    <include name="**/?*.xml"/>
  </patternset>


  <!-- Project Libraries -->

  <path id="library.guice.classpath">
    <pathelement location="${basedir}/lib/guice-snapshot.jar"/>
  </path>

  <path id="library.gwt-user.classpath">
    <pathelement location="${gwt.home}/gwt-user.jar"/>
  </path>

  <path id="library.gwt-dev.classpath">
    <fileset dir="${gwt.home}" includes="gwt-dev-*.jar"/>
  </path>

  <path id="library.junit.classpath">
    <pathelement location="${basedir}/lib/test/junit.jar"/>
  </path>

  <path id="library.aopalliance.classpath">
    <pathelement location="${basedir}/lib/aopalliance.jar"/>
  </path>

  <dirname property="gin.basedir" file="${ant.file}"/>

  <property name="gin.source.dir" value="${gin.basedir}/src"/>

  <property name="gin.output.base" value="${gin.basedir}/out"/>
  <property name="gin.output.dir" value="${gin.output.base}/production"/>
  <property name="gin.dist.dir" value="${gin.output.base}/dist"/>
  <property name="gin.javadoc.dir" value="${gin.output.base}/javadoc"/>
  <property name="gin.testoutput.dir" value="${gin.output.base}/test"/>
  <property name="gin.testrun.dir" value="${gin.output.base}/testrun"/>
  <property name="gin.testrungen.dir" value="${gin.output.base}/testrun/gen"/>

  <path id="gin.classpath">
    <path refid="library.guice.classpath"/>
    <path refid="library.gwt-user.classpath"/>
    <path refid="library.gwt-dev.classpath"/>
    <path refid="library.aopalliance.classpath"/>
  </path>

  <path id="gin.test.classpath">
    <pathelement location="${gin.output.dir}"/>
    <pathelement location="${gin.testoutput.dir}"/>
    <path refid="library.guice.classpath"/>
    <path refid="library.gwt-user.classpath"/>
    <path refid="library.gwt-dev.classpath"/>
    <path refid="library.junit.classpath"/>
    <path refid="library.aopalliance.classpath"/>

    <!-- Put test sources on test classpath so GWT compiler can see them -->
    <path refid="gin.test.sourcepath"/>
  </path>

  <path id="gin.sourcepath" path="${gin.basedir}/src"/>
  <path id="gin.test.sourcepath" path="${gin.basedir}/test"/>

  <target name="compile" depends="compile.production,compile.tests"/>

  <target name="compile.production" description="Compile module gin; production classes">
    <mkdir dir="${gin.output.dir}"/>
    <javac destdir="${gin.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args}"/>
      <classpath refid="gin.classpath"/>
      <src refid="gin.sourcepath"/>

      <!-- Don't compile the fake Guice API classes; they are just for
           the GWT compiler to see. Compiling them with javac breaks the
           generator because it then sees the wrong versions of the Guice
           classes (it needs the real ones). -->
      <exclude name="com/google/gwt/inject/guiceapi/**" />
    </javac>

    <copy todir="${gin.output.dir}">
      <fileset dir="${gin.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>

    <!-- Also include client and guiceapi .java files in the output, for GWT -->
    <copy todir="${gin.output.dir}">
      <fileset dir="${gin.basedir}/src">
        <include name="com/google/gwt/inject/client/**/*.java" />
        <include name="com/google/gwt/inject/guiceapi/**/*.java" />
      </fileset>
    </copy>
  </target>

  <target name="compile.tests" depends="compile.production" description="compile module gin; test classes" unless="skip.tests">
    <mkdir dir="${gin.testoutput.dir}"/>
    <javac destdir="${gin.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args}"/>
      <classpath refid="gin.classpath"/>
      <classpath location="${gin.output.dir}"/>
      <src refid="gin.test.sourcepath"/>
    </javac>

    <copy todir="${gin.testoutput.dir}">
      <fileset dir="${gin.basedir}/test">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="test.web, test.hosted" />

  <!-- TODO: Some way to avoid this copy/paste -->
  <target name="test.web" depends="compile">
    <mkdir dir="${gin.testrun.dir}"/>
    <mkdir dir="${gin.testrungen.dir}"/>

    <junit printsummary="yes" fork="yes" showoutput="true" maxmemory="${test.max.memory}"
           haltonerror="true" >
      <jvmarg line="${macJvmArgs}"/>
      <formatter type="brief" />

      <!-- Switches from hosted to Web mode and saves intermediate output -->
      <!-- Add -logLevel TRACE to get more debug output -->
      <jvmarg value="-Dgwt.args=-web -gen ${gin.testrungen.dir} "/>

      <classpath refid="gin.test.classpath"/>
      <batchtest todir="${gin.testrun.dir}">
        <fileset dir="${gin.testoutput.dir}" includes="**/*Test.class" />
      </batchtest>
    </junit>
  </target>

  <target name="test.hosted" depends="compile">
    <mkdir dir="${gin.testrun.dir}"/>

    <junit printsummary="yes" fork="yes" showoutput="true" maxmemory="${test.max.memory}"
           haltonerror="true" >
      <jvmarg line="${macJvmArgs}"/>
      <formatter type="brief" />

      <classpath refid="gin.test.classpath"/>
      <batchtest todir="${gin.testrun.dir}">
        <fileset dir="${gin.testoutput.dir}" includes="**/*Test.class" />
      </batchtest>
    </junit>
  </target>

  <target name="dist">
    <mkdir dir="${gin.dist.dir}"/>
    <jar destfile="${gin.dist.dir}/gin.jar">
      <fileset dir="${gin.output.dir}" />
    </jar>

    <zip destfile="${gin.dist.dir}/gin-src.jar">
      <fileset dir="${gin.source.dir}"/>
      <fileset file="LICENSE"/>
    </zip>
  </target>

  <target name="clean" description="cleanup module">
    <delete dir="${gin.output.base}"/>
  </target>

  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>

  <target name="javadoc" description="Creates javadoc">
    <javadoc sourcepath="${gin.source.dir}" destdir="${gin.javadoc.dir}" classpathref="gin.classpath">
      <link href="http://google-guice.googlecode.com/svn/trunk/javadoc" />
    </javadoc>
  </target>

  <target name="all" depends="init, clean, compile, test, dist" description="build all"/>
</project>
